name: CICD

on:
  push:
    paths:
      - '**'
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Run test coverage
        run: npm run test:coverage

  ci:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          file: Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/node-app:${{ env.SHORT_SHA }}
    outputs:
      short_commit_sha: ${{ env.SHORT_SHA }}
    
  cd: 
    runs-on: self-hosted
    needs: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Modify version argo values.yaml
        shell: bash
        run: |
          # Use a more robust approach that works on both Linux and macOS
          sed -i.bak "s/tag: \".*\"/tag: \"${{ needs.ci.outputs.short_commit_sha }}\"/" charts/backstage-node-app/values.yaml
          rm -f charts/backstage-node-app/values.yaml.bak

      - name: Install ArgoCD CLI
        run: |
          # Create temp directory and download ArgoCD CLI
          mkdir -p /tmp/argocd
          cd /tmp/argocd
          
          # Download with retry and better error handling
          for i in {1..3}; do
            if curl -L -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64; then
              break
            else
              echo "Download attempt $i failed, retrying..."
              sleep 2
            fi
          done
          
          # Verify download and install
          if [ -f argocd-linux-amd64 ]; then
            chmod +x argocd-linux-amd64
            sudo mv argocd-linux-amd64 /usr/local/bin/argocd
            echo "ArgoCD CLI installed successfully"
            argocd version --client
          else
            echo "Failed to download ArgoCD CLI after 3 attempts"
            exit 1
          fi
          
      - name: ArgoCD Login and Sync
        run: |
          # Wait for ArgoCD to be ready
          echo "Waiting for ArgoCD to be ready..."
          sleep 10
          
          # Login to ArgoCD with retry
          for i in {1..3}; do
            if argocd login localhost:8080 \
              --username admin \
              --password ${{ secrets.ARGOCD_PASSWORD }} \
              --insecure; then
              echo "ArgoCD login successful"
              break
            else
              echo "ArgoCD login attempt $i failed, retrying..."
              sleep 5
            fi
          done
          
          # Sync the application
          echo "Syncing ArgoCD application..."
          argocd app sync backstage-node-app --force
          
          # Wait for sync to complete
          argocd app wait backstage-node-app --health --timeout 300
            

